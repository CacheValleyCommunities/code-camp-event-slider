{"ast":null,"code":"function overlayImages(baseImageSrc, coverImageSrc, baseImageOptions, coverImageOptions) {\n  return new Promise((resolve, reject) => {\n    const baseImage = new Image();\n    const coverImage = new Image();\n    baseImage.src = baseImageSrc;\n    coverImage.src = coverImageSrc;\n\n    // Wait for both images to load\n    Promise.all([new Promise(res => {\n      baseImage.onload = res;\n    }), new Promise(res => {\n      coverImage.onload = res;\n    })]).then(() => {\n      // Create canvas and context\n      const canvas = document.createElement(\"canvas\");\n      const ctx = canvas.getContext(\"2d\");\n\n      // Set canvas dimensions based on base image options\n      canvas.width = baseImageOptions.width;\n      canvas.height = baseImageOptions.height;\n\n      // Draw the base image scaled to its specified dimensions\n      ctx.drawImage(baseImage, 0, 0, baseImageOptions.width, baseImageOptions.height);\n\n      // Calculate scaling factors for the cover image\n      const scaleX = baseImageOptions.width / coverImage.width;\n      const scaleY = baseImageOptions.height / coverImage.height;\n      const scale = Math.min(scaleX, scaleY) - 0.15; // Maintain aspect ratio\n\n      // Calculate new dimensions for the cover image\n      const coverWidth = coverImage.width * scale;\n      const coverHeight = coverImage.height * scale;\n\n      // Calculate position to center the resized cover image\n      const coverX = (canvas.width - coverWidth) / 2;\n      const coverY = (canvas.height - coverHeight) / 2;\n\n      // Draw the cover image centered and resized\n      ctx.drawImage(coverImage, coverX, coverY, coverWidth, coverHeight);\n\n      // Convert canvas to Blob URL\n      canvas.toBlob(blob => {\n        if (blob) {\n          const blobUrl = URL.createObjectURL(blob);\n          resolve(blobUrl);\n        } else {\n          reject(new Error(\"Failed to create Blob from canvas.\"));\n        }\n      }, \"image/png\");\n    }).catch(e => {\n      console.error(e);\n      reject(new Error(\"Image loading error.\"));\n    });\n  });\n}\nexport default overlayImages;\n\n// Example usage:\n// overlayImages('baseImage.png', 'coverImage.png', { width: 800, height: 600 }, { width: 300, height: 400 })\n//     .then(blobUrl => {\n//         console.log('Blob URL:', blobUrl);\n//     })\n//     .catch(err => {\n//         console.error('Error:', err);\n//     });","map":{"version":3,"names":["overlayImages","baseImageSrc","coverImageSrc","baseImageOptions","coverImageOptions","Promise","resolve","reject","baseImage","Image","coverImage","src","all","res","onload","then","canvas","document","createElement","ctx","getContext","width","height","drawImage","scaleX","scaleY","scale","Math","min","coverWidth","coverHeight","coverX","coverY","toBlob","blob","blobUrl","URL","createObjectURL","Error","catch","e","console","error"],"sources":["/Users/brentdalling/Projects/code-camp-event-slider/src/components/Canvas/Helpers/overlayImages.js"],"sourcesContent":["function overlayImages(\n  baseImageSrc,\n  coverImageSrc,\n  baseImageOptions,\n  coverImageOptions\n) {\n  return new Promise((resolve, reject) => {\n    const baseImage = new Image();\n    const coverImage = new Image();\n\n    baseImage.src = baseImageSrc;\n    coverImage.src = coverImageSrc;\n\n    // Wait for both images to load\n    Promise.all([\n      new Promise((res) => {\n        baseImage.onload = res;\n      }),\n      new Promise((res) => {\n        coverImage.onload = res;\n      }),\n    ])\n      .then(() => {\n        // Create canvas and context\n        const canvas = document.createElement(\"canvas\");\n        const ctx = canvas.getContext(\"2d\");\n\n        // Set canvas dimensions based on base image options\n        canvas.width = baseImageOptions.width;\n        canvas.height = baseImageOptions.height;\n\n        // Draw the base image scaled to its specified dimensions\n        ctx.drawImage(\n          baseImage,\n          0,\n          0,\n          baseImageOptions.width,\n          baseImageOptions.height\n        );\n\n        // Calculate scaling factors for the cover image\n        const scaleX = baseImageOptions.width / coverImage.width;\n        const scaleY = baseImageOptions.height / coverImage.height;\n        const scale = Math.min(scaleX, scaleY) - 0.15; // Maintain aspect ratio\n\n        // Calculate new dimensions for the cover image\n        const coverWidth = coverImage.width * scale;\n        const coverHeight = coverImage.height * scale;\n\n        // Calculate position to center the resized cover image\n        const coverX = (canvas.width - coverWidth) / 2;\n        const coverY = (canvas.height - coverHeight) / 2;\n\n        // Draw the cover image centered and resized\n        ctx.drawImage(coverImage, coverX, coverY, coverWidth, coverHeight);\n\n        // Convert canvas to Blob URL\n        canvas.toBlob((blob) => {\n          if (blob) {\n            const blobUrl = URL.createObjectURL(blob);\n            resolve(blobUrl);\n          } else {\n            reject(new Error(\"Failed to create Blob from canvas.\"));\n          }\n        }, \"image/png\");\n      })\n      .catch((e) => {\n        console.error(e);\n        reject(new Error(\"Image loading error.\"));\n      });\n  });\n}\n\nexport default overlayImages;\n\n// Example usage:\n// overlayImages('baseImage.png', 'coverImage.png', { width: 800, height: 600 }, { width: 300, height: 400 })\n//     .then(blobUrl => {\n//         console.log('Blob URL:', blobUrl);\n//     })\n//     .catch(err => {\n//         console.error('Error:', err);\n//     });\n"],"mappings":"AAAA,SAASA,aAAaA,CACpBC,YAAY,EACZC,aAAa,EACbC,gBAAgB,EAChBC,iBAAiB,EACjB;EACA,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,SAAS,GAAG,IAAIC,KAAK,CAAC,CAAC;IAC7B,MAAMC,UAAU,GAAG,IAAID,KAAK,CAAC,CAAC;IAE9BD,SAAS,CAACG,GAAG,GAAGV,YAAY;IAC5BS,UAAU,CAACC,GAAG,GAAGT,aAAa;;IAE9B;IACAG,OAAO,CAACO,GAAG,CAAC,CACV,IAAIP,OAAO,CAAEQ,GAAG,IAAK;MACnBL,SAAS,CAACM,MAAM,GAAGD,GAAG;IACxB,CAAC,CAAC,EACF,IAAIR,OAAO,CAAEQ,GAAG,IAAK;MACnBH,UAAU,CAACI,MAAM,GAAGD,GAAG;IACzB,CAAC,CAAC,CACH,CAAC,CACCE,IAAI,CAAC,MAAM;MACV;MACA,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC/C,MAAMC,GAAG,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;;MAEnC;MACAJ,MAAM,CAACK,KAAK,GAAGlB,gBAAgB,CAACkB,KAAK;MACrCL,MAAM,CAACM,MAAM,GAAGnB,gBAAgB,CAACmB,MAAM;;MAEvC;MACAH,GAAG,CAACI,SAAS,CACXf,SAAS,EACT,CAAC,EACD,CAAC,EACDL,gBAAgB,CAACkB,KAAK,EACtBlB,gBAAgB,CAACmB,MACnB,CAAC;;MAED;MACA,MAAME,MAAM,GAAGrB,gBAAgB,CAACkB,KAAK,GAAGX,UAAU,CAACW,KAAK;MACxD,MAAMI,MAAM,GAAGtB,gBAAgB,CAACmB,MAAM,GAAGZ,UAAU,CAACY,MAAM;MAC1D,MAAMI,KAAK,GAAGC,IAAI,CAACC,GAAG,CAACJ,MAAM,EAAEC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC;;MAE/C;MACA,MAAMI,UAAU,GAAGnB,UAAU,CAACW,KAAK,GAAGK,KAAK;MAC3C,MAAMI,WAAW,GAAGpB,UAAU,CAACY,MAAM,GAAGI,KAAK;;MAE7C;MACA,MAAMK,MAAM,GAAG,CAACf,MAAM,CAACK,KAAK,GAAGQ,UAAU,IAAI,CAAC;MAC9C,MAAMG,MAAM,GAAG,CAAChB,MAAM,CAACM,MAAM,GAAGQ,WAAW,IAAI,CAAC;;MAEhD;MACAX,GAAG,CAACI,SAAS,CAACb,UAAU,EAAEqB,MAAM,EAAEC,MAAM,EAAEH,UAAU,EAAEC,WAAW,CAAC;;MAElE;MACAd,MAAM,CAACiB,MAAM,CAAEC,IAAI,IAAK;QACtB,IAAIA,IAAI,EAAE;UACR,MAAMC,OAAO,GAAGC,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC;UACzC5B,OAAO,CAAC6B,OAAO,CAAC;QAClB,CAAC,MAAM;UACL5B,MAAM,CAAC,IAAI+B,KAAK,CAAC,oCAAoC,CAAC,CAAC;QACzD;MACF,CAAC,EAAE,WAAW,CAAC;IACjB,CAAC,CAAC,CACDC,KAAK,CAAEC,CAAC,IAAK;MACZC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;MAChBjC,MAAM,CAAC,IAAI+B,KAAK,CAAC,sBAAsB,CAAC,CAAC;IAC3C,CAAC,CAAC;EACN,CAAC,CAAC;AACJ;AAEA,eAAetC,aAAa;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}