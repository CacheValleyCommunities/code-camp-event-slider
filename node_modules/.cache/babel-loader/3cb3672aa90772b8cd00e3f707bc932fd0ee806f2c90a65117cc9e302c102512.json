{"ast":null,"code":"/**\n * Procedural Sky Generator\n * Creates dynamic sky backgrounds with gradient rendering and atmospheric effects\n */\n\nimport ColorPalette from '../utils/ColorPalette.js';\nimport NoiseGenerator from '../utils/NoiseGenerator.js';\nexport class SkyGenerator {\n  constructor(canvas, options = {}) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n    this.colorPalette = new ColorPalette();\n    this.noiseGenerator = new NoiseGenerator(options.seed || Math.random() * 1000);\n\n    // Configuration options\n    this.options = {\n      timeOfDay: options.timeOfDay || 'day',\n      enableNoise: options.enableNoise !== false,\n      noiseIntensity: options.noiseIntensity || 0.1,\n      gradientSteps: options.gradientSteps || 256,\n      atmosphericPerspective: options.atmosphericPerspective !== false,\n      sunPosition: options.sunPosition || {\n        x: 0.7,\n        y: 0.3\n      },\n      enableSun: options.enableSun !== false,\n      animationSpeed: options.animationSpeed || 0.001,\n      updateInterval: options.updateInterval || 10000,\n      // Update every 10 seconds\n      ...options\n    };\n    this.time = 0;\n    this.lastUpdateTime = 0;\n    this.offscreenCanvas = document.createElement('canvas');\n    this.offscreenCtx = this.offscreenCanvas.getContext('2d');\n    this.offscreenCanvas.width = canvas.width;\n    this.offscreenCanvas.height = canvas.height;\n\n    // Initialize color palette\n    this.colorPalette.setTimeOfDay(this.options.timeOfDay);\n    this.generateSkyTexture();\n  }\n\n  /**\n   * Generate the base sky texture using gradients and noise\n   */\n  generateSkyTexture() {\n    const width = this.canvas.width;\n    const height = this.canvas.height;\n    const palette = this.colorPalette.getCurrentPalette();\n\n    // Create gradient from top to bottom\n    const gradient = this.offscreenCtx.createLinearGradient(0, 0, 0, height);\n\n    // Add gradient stops based on current palette\n    gradient.addColorStop(0, palette.skyTop);\n    gradient.addColorStop(0.3, palette.skyMid);\n    gradient.addColorStop(0.7, palette.skyHorizon);\n    gradient.addColorStop(1, palette.skyHorizon);\n\n    // Fill with gradient\n    this.offscreenCtx.fillStyle = gradient;\n    this.offscreenCtx.fillRect(0, 0, width, height);\n\n    // Add atmospheric noise if enabled\n    if (this.options.enableNoise) {\n      this.addAtmosphericNoise();\n    }\n\n    // Add sun if enabled\n    if (this.options.enableSun) {\n      this.addSun();\n    }\n  }\n\n  /**\n   * Add subtle atmospheric noise for texture\n   */\n  addAtmosphericNoise() {\n    const width = this.canvas.width;\n    const height = this.canvas.height;\n    const imageData = this.offscreenCtx.getImageData(0, 0, width, height);\n    const data = imageData.data;\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        const i = (y * width + x) * 4;\n\n        // Generate noise value\n        const noiseValue = this.noiseGenerator.octaveNoise2D(x * 0.002 + this.time, y * 0.002, 3, 0.5);\n\n        // Apply noise to each color channel\n        const noiseIntensity = this.options.noiseIntensity * 255;\n        const adjustment = noiseValue * noiseIntensity;\n        data[i] = Math.max(0, Math.min(255, data[i] + adjustment)); // Red\n        data[i + 1] = Math.max(0, Math.min(255, data[i + 1] + adjustment)); // Green\n        data[i + 2] = Math.max(0, Math.min(255, data[i + 2] + adjustment)); // Blue\n      }\n    }\n    this.offscreenCtx.putImageData(imageData, 0, 0);\n  }\n\n  /**\n   * Add sun or moon to the sky\n   */\n  addSun() {\n    const width = this.canvas.width;\n    const height = this.canvas.height;\n    const palette = this.colorPalette.getCurrentPalette();\n    const sunX = width * this.options.sunPosition.x;\n    const sunY = height * this.options.sunPosition.y;\n    const sunRadius = Math.min(width, height) * 0.04; // Slightly smaller for moon\n\n    // Different rendering for night vs day\n    if (this.options.timeOfDay === 'night') {\n      // Render moon with soft glow\n      const moonGradient = this.offscreenCtx.createRadialGradient(sunX, sunY, 0, sunX, sunY, sunRadius * 2);\n      moonGradient.addColorStop(0, palette.sunColor);\n      moonGradient.addColorStop(0.4, palette.sunColor + '40'); // More subtle glow\n      moonGradient.addColorStop(1, 'transparent');\n\n      // Draw moon glow\n      this.offscreenCtx.globalCompositeOperation = 'screen';\n      this.offscreenCtx.fillStyle = moonGradient;\n      this.offscreenCtx.fillRect(sunX - sunRadius * 2, sunY - sunRadius * 2, sunRadius * 4, sunRadius * 4);\n\n      // Draw moon disc\n      this.offscreenCtx.globalCompositeOperation = 'source-over';\n      this.offscreenCtx.beginPath();\n      this.offscreenCtx.arc(sunX, sunY, sunRadius, 0, Math.PI * 2);\n      this.offscreenCtx.fillStyle = palette.sunColor;\n      this.offscreenCtx.fill();\n    } else {\n      // Original sun rendering for day modes\n      const sunGradient = this.offscreenCtx.createRadialGradient(sunX, sunY, 0, sunX, sunY, sunRadius * 3);\n      sunGradient.addColorStop(0, palette.sunColor);\n      sunGradient.addColorStop(0.3, palette.sunColor + '80'); // Semi-transparent\n      sunGradient.addColorStop(0.6, palette.sunColor + '20'); // More transparent\n      sunGradient.addColorStop(1, 'transparent');\n\n      // Draw sun glow\n      this.offscreenCtx.globalCompositeOperation = 'screen';\n      this.offscreenCtx.fillStyle = sunGradient;\n      this.offscreenCtx.fillRect(sunX - sunRadius * 3, sunY - sunRadius * 3, sunRadius * 6, sunRadius * 6);\n\n      // Draw sun disc\n      this.offscreenCtx.globalCompositeOperation = 'source-over';\n      this.offscreenCtx.beginPath();\n      this.offscreenCtx.arc(sunX, sunY, sunRadius, 0, Math.PI * 2);\n      this.offscreenCtx.fillStyle = palette.sunColor;\n      this.offscreenCtx.fill();\n    }\n  }\n\n  /**\n   * Update sky animation\n   * @param {number} deltaTime - Time since last update\n   */\n  update(deltaTime = 16) {\n    this.time += this.options.animationSpeed * deltaTime;\n\n    // Only regenerate texture at specified intervals for performance\n    const currentTime = Date.now();\n    if (this.options.enableNoise && currentTime - this.lastUpdateTime >= this.options.updateInterval) {\n      this.generateSkyTexture();\n      this.lastUpdateTime = currentTime;\n    }\n  }\n\n  /**\n   * Render the sky to the main canvas\n   * @param {number} offsetX - Horizontal offset for parallax scrolling\n   * @param {number} offsetY - Vertical offset\n   */\n  render(offsetX = 0, offsetY = 0) {\n    // Clear the main canvas\n    this.ctx.save();\n\n    // Apply parallax offset (sky moves very slowly)\n    const parallaxX = offsetX * 0.1;\n    const parallaxY = offsetY * 0.05;\n\n    // Create pattern from offscreen canvas for seamless tiling\n    const pattern = this.ctx.createPattern(this.offscreenCanvas, 'repeat-x');\n    this.ctx.fillStyle = pattern;\n\n    // Apply transform for parallax\n    this.ctx.translate(-parallaxX, -parallaxY);\n\n    // Fill the entire canvas\n    this.ctx.fillRect(-parallaxX, -parallaxY, this.canvas.width + parallaxX * 2, this.canvas.height + parallaxY * 2);\n    this.ctx.restore();\n  }\n\n  /**\n   * Change time of day with smooth transition\n   * @param {string} newTimeOfDay - New time of day\n   * @param {number} transitionDuration - Transition duration in milliseconds\n   */\n  setTimeOfDay(newTimeOfDay, transitionDuration = 2000) {\n    if (transitionDuration === 0) {\n      this.colorPalette.setTimeOfDay(newTimeOfDay);\n      this.options.timeOfDay = newTimeOfDay;\n      this.generateSkyTexture();\n      return;\n    }\n\n    // TODO: Implement smooth color transition\n    // For now, just change immediately\n    this.colorPalette.setTimeOfDay(newTimeOfDay);\n    this.options.timeOfDay = newTimeOfDay;\n    this.generateSkyTexture();\n  }\n\n  /**\n   * Get current sky configuration\n   * @returns {Object} Current options\n   */\n  getOptions() {\n    return {\n      ...this.options\n    };\n  }\n\n  /**\n   * Update sky configuration\n   * @param {Object} newOptions - New options to apply\n   */\n  updateOptions(newOptions) {\n    this.options = {\n      ...this.options,\n      ...newOptions\n    };\n    if (newOptions.timeOfDay) {\n      this.colorPalette.setTimeOfDay(newOptions.timeOfDay);\n    }\n    if (newOptions.seed) {\n      this.noiseGenerator = new NoiseGenerator(newOptions.seed);\n    }\n    this.generateSkyTexture();\n  }\n\n  /**\n   * Get current time of day based on real time\n   * @returns {string} Time of day string\n   */\n  getAutomaticTimeOfDay() {\n    return this.colorPalette.getTimeBasedPalette();\n  }\n\n  /**\n   * Enable automatic time of day updates\n   */\n  enableAutomaticTimeOfDay() {\n    this.setTimeOfDay(this.getAutomaticTimeOfDay());\n\n    // Update every minute\n    this.timeUpdateInterval = setInterval(() => {\n      const newTimeOfDay = this.getAutomaticTimeOfDay();\n      if (newTimeOfDay !== this.options.timeOfDay) {\n        this.setTimeOfDay(newTimeOfDay, 5000); // 5 second transition\n      }\n    }, 60000);\n  }\n\n  /**\n   * Disable automatic time of day updates\n   */\n  disableAutomaticTimeOfDay() {\n    if (this.timeUpdateInterval) {\n      clearInterval(this.timeUpdateInterval);\n      this.timeUpdateInterval = null;\n    }\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy() {\n    this.disableAutomaticTimeOfDay();\n    this.offscreenCanvas = null;\n    this.offscreenCtx = null;\n  }\n}\nexport default SkyGenerator;","map":{"version":3,"names":["ColorPalette","NoiseGenerator","SkyGenerator","constructor","canvas","options","ctx","getContext","colorPalette","noiseGenerator","seed","Math","random","timeOfDay","enableNoise","noiseIntensity","gradientSteps","atmosphericPerspective","sunPosition","x","y","enableSun","animationSpeed","updateInterval","time","lastUpdateTime","offscreenCanvas","document","createElement","offscreenCtx","width","height","setTimeOfDay","generateSkyTexture","palette","getCurrentPalette","gradient","createLinearGradient","addColorStop","skyTop","skyMid","skyHorizon","fillStyle","fillRect","addAtmosphericNoise","addSun","imageData","getImageData","data","i","noiseValue","octaveNoise2D","adjustment","max","min","putImageData","sunX","sunY","sunRadius","moonGradient","createRadialGradient","sunColor","globalCompositeOperation","beginPath","arc","PI","fill","sunGradient","update","deltaTime","currentTime","Date","now","render","offsetX","offsetY","save","parallaxX","parallaxY","pattern","createPattern","translate","restore","newTimeOfDay","transitionDuration","getOptions","updateOptions","newOptions","getAutomaticTimeOfDay","getTimeBasedPalette","enableAutomaticTimeOfDay","timeUpdateInterval","setInterval","disableAutomaticTimeOfDay","clearInterval","destroy"],"sources":["/Users/brentdalling/Projects/code-camp-event-slider/src/graphics/generators/SkyGenerator.js"],"sourcesContent":["/**\n * Procedural Sky Generator\n * Creates dynamic sky backgrounds with gradient rendering and atmospheric effects\n */\n\nimport ColorPalette from '../utils/ColorPalette.js';\nimport NoiseGenerator from '../utils/NoiseGenerator.js';\n\nexport class SkyGenerator {\n    constructor(canvas, options = {}) {\n        this.canvas = canvas;\n        this.ctx = canvas.getContext('2d');\n        this.colorPalette = new ColorPalette();\n        this.noiseGenerator = new NoiseGenerator(options.seed || Math.random() * 1000);\n\n        // Configuration options\n        this.options = {\n            timeOfDay: options.timeOfDay || 'day',\n            enableNoise: options.enableNoise !== false,\n            noiseIntensity: options.noiseIntensity || 0.1,\n            gradientSteps: options.gradientSteps || 256,\n            atmosphericPerspective: options.atmosphericPerspective !== false,\n            sunPosition: options.sunPosition || { x: 0.7, y: 0.3 },\n            enableSun: options.enableSun !== false,\n            animationSpeed: options.animationSpeed || 0.001,\n            updateInterval: options.updateInterval || 10000, // Update every 10 seconds\n            ...options\n        };\n\n        this.time = 0;\n        this.lastUpdateTime = 0;\n        this.offscreenCanvas = document.createElement('canvas');\n        this.offscreenCtx = this.offscreenCanvas.getContext('2d');\n        this.offscreenCanvas.width = canvas.width;\n        this.offscreenCanvas.height = canvas.height;\n\n        // Initialize color palette\n        this.colorPalette.setTimeOfDay(this.options.timeOfDay);\n\n        this.generateSkyTexture();\n    }\n\n    /**\n     * Generate the base sky texture using gradients and noise\n     */\n    generateSkyTexture() {\n        const width = this.canvas.width;\n        const height = this.canvas.height;\n        const palette = this.colorPalette.getCurrentPalette();\n\n        // Create gradient from top to bottom\n        const gradient = this.offscreenCtx.createLinearGradient(0, 0, 0, height);\n\n        // Add gradient stops based on current palette\n        gradient.addColorStop(0, palette.skyTop);\n        gradient.addColorStop(0.3, palette.skyMid);\n        gradient.addColorStop(0.7, palette.skyHorizon);\n        gradient.addColorStop(1, palette.skyHorizon);\n\n        // Fill with gradient\n        this.offscreenCtx.fillStyle = gradient;\n        this.offscreenCtx.fillRect(0, 0, width, height);\n\n        // Add atmospheric noise if enabled\n        if (this.options.enableNoise) {\n            this.addAtmosphericNoise();\n        }\n\n        // Add sun if enabled\n        if (this.options.enableSun) {\n            this.addSun();\n        }\n    }\n\n    /**\n     * Add subtle atmospheric noise for texture\n     */\n    addAtmosphericNoise() {\n        const width = this.canvas.width;\n        const height = this.canvas.height;\n        const imageData = this.offscreenCtx.getImageData(0, 0, width, height);\n        const data = imageData.data;\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                const i = (y * width + x) * 4;\n\n                // Generate noise value\n                const noiseValue = this.noiseGenerator.octaveNoise2D(\n                    x * 0.002 + this.time,\n                    y * 0.002,\n                    3,\n                    0.5\n                );\n\n                // Apply noise to each color channel\n                const noiseIntensity = this.options.noiseIntensity * 255;\n                const adjustment = noiseValue * noiseIntensity;\n\n                data[i] = Math.max(0, Math.min(255, data[i] + adjustment));     // Red\n                data[i + 1] = Math.max(0, Math.min(255, data[i + 1] + adjustment)); // Green\n                data[i + 2] = Math.max(0, Math.min(255, data[i + 2] + adjustment)); // Blue\n            }\n        }\n\n        this.offscreenCtx.putImageData(imageData, 0, 0);\n    }\n\n    /**\n     * Add sun or moon to the sky\n     */\n    addSun() {\n        const width = this.canvas.width;\n        const height = this.canvas.height;\n        const palette = this.colorPalette.getCurrentPalette();\n\n        const sunX = width * this.options.sunPosition.x;\n        const sunY = height * this.options.sunPosition.y;\n        const sunRadius = Math.min(width, height) * 0.04; // Slightly smaller for moon\n\n        // Different rendering for night vs day\n        if (this.options.timeOfDay === 'night') {\n            // Render moon with soft glow\n            const moonGradient = this.offscreenCtx.createRadialGradient(\n                sunX, sunY, 0,\n                sunX, sunY, sunRadius * 2\n            );\n\n            moonGradient.addColorStop(0, palette.sunColor);\n            moonGradient.addColorStop(0.4, palette.sunColor + '40'); // More subtle glow\n            moonGradient.addColorStop(1, 'transparent');\n\n            // Draw moon glow\n            this.offscreenCtx.globalCompositeOperation = 'screen';\n            this.offscreenCtx.fillStyle = moonGradient;\n            this.offscreenCtx.fillRect(\n                sunX - sunRadius * 2,\n                sunY - sunRadius * 2,\n                sunRadius * 4,\n                sunRadius * 4\n            );\n\n            // Draw moon disc\n            this.offscreenCtx.globalCompositeOperation = 'source-over';\n            this.offscreenCtx.beginPath();\n            this.offscreenCtx.arc(sunX, sunY, sunRadius, 0, Math.PI * 2);\n            this.offscreenCtx.fillStyle = palette.sunColor;\n            this.offscreenCtx.fill();\n        } else {\n            // Original sun rendering for day modes\n            const sunGradient = this.offscreenCtx.createRadialGradient(\n                sunX, sunY, 0,\n                sunX, sunY, sunRadius * 3\n            );\n\n            sunGradient.addColorStop(0, palette.sunColor);\n            sunGradient.addColorStop(0.3, palette.sunColor + '80'); // Semi-transparent\n            sunGradient.addColorStop(0.6, palette.sunColor + '20'); // More transparent\n            sunGradient.addColorStop(1, 'transparent');\n\n            // Draw sun glow\n            this.offscreenCtx.globalCompositeOperation = 'screen';\n            this.offscreenCtx.fillStyle = sunGradient;\n            this.offscreenCtx.fillRect(\n                sunX - sunRadius * 3,\n                sunY - sunRadius * 3,\n                sunRadius * 6,\n                sunRadius * 6\n            );\n\n            // Draw sun disc\n            this.offscreenCtx.globalCompositeOperation = 'source-over';\n            this.offscreenCtx.beginPath();\n            this.offscreenCtx.arc(sunX, sunY, sunRadius, 0, Math.PI * 2);\n            this.offscreenCtx.fillStyle = palette.sunColor;\n            this.offscreenCtx.fill();\n        }\n    }\n\n    /**\n     * Update sky animation\n     * @param {number} deltaTime - Time since last update\n     */\n    update(deltaTime = 16) {\n        this.time += this.options.animationSpeed * deltaTime;\n\n        // Only regenerate texture at specified intervals for performance\n        const currentTime = Date.now();\n        if (this.options.enableNoise &&\n            currentTime - this.lastUpdateTime >= this.options.updateInterval) {\n            this.generateSkyTexture();\n            this.lastUpdateTime = currentTime;\n        }\n    }\n\n    /**\n     * Render the sky to the main canvas\n     * @param {number} offsetX - Horizontal offset for parallax scrolling\n     * @param {number} offsetY - Vertical offset\n     */\n    render(offsetX = 0, offsetY = 0) {\n        // Clear the main canvas\n        this.ctx.save();\n\n        // Apply parallax offset (sky moves very slowly)\n        const parallaxX = offsetX * 0.1;\n        const parallaxY = offsetY * 0.05;\n\n        // Create pattern from offscreen canvas for seamless tiling\n        const pattern = this.ctx.createPattern(this.offscreenCanvas, 'repeat-x');\n        this.ctx.fillStyle = pattern;\n\n        // Apply transform for parallax\n        this.ctx.translate(-parallaxX, -parallaxY);\n\n        // Fill the entire canvas\n        this.ctx.fillRect(\n            -parallaxX,\n            -parallaxY,\n            this.canvas.width + parallaxX * 2,\n            this.canvas.height + parallaxY * 2\n        );\n\n        this.ctx.restore();\n    }\n\n    /**\n     * Change time of day with smooth transition\n     * @param {string} newTimeOfDay - New time of day\n     * @param {number} transitionDuration - Transition duration in milliseconds\n     */\n    setTimeOfDay(newTimeOfDay, transitionDuration = 2000) {\n        if (transitionDuration === 0) {\n            this.colorPalette.setTimeOfDay(newTimeOfDay);\n            this.options.timeOfDay = newTimeOfDay;\n            this.generateSkyTexture();\n            return;\n        }\n\n        // TODO: Implement smooth color transition\n        // For now, just change immediately\n        this.colorPalette.setTimeOfDay(newTimeOfDay);\n        this.options.timeOfDay = newTimeOfDay;\n        this.generateSkyTexture();\n    }\n\n    /**\n     * Get current sky configuration\n     * @returns {Object} Current options\n     */\n    getOptions() {\n        return { ...this.options };\n    }\n\n    /**\n     * Update sky configuration\n     * @param {Object} newOptions - New options to apply\n     */\n    updateOptions(newOptions) {\n        this.options = { ...this.options, ...newOptions };\n\n        if (newOptions.timeOfDay) {\n            this.colorPalette.setTimeOfDay(newOptions.timeOfDay);\n        }\n\n        if (newOptions.seed) {\n            this.noiseGenerator = new NoiseGenerator(newOptions.seed);\n        }\n\n        this.generateSkyTexture();\n    }\n\n    /**\n     * Get current time of day based on real time\n     * @returns {string} Time of day string\n     */\n    getAutomaticTimeOfDay() {\n        return this.colorPalette.getTimeBasedPalette();\n    }\n\n    /**\n     * Enable automatic time of day updates\n     */\n    enableAutomaticTimeOfDay() {\n        this.setTimeOfDay(this.getAutomaticTimeOfDay());\n\n        // Update every minute\n        this.timeUpdateInterval = setInterval(() => {\n            const newTimeOfDay = this.getAutomaticTimeOfDay();\n            if (newTimeOfDay !== this.options.timeOfDay) {\n                this.setTimeOfDay(newTimeOfDay, 5000); // 5 second transition\n            }\n        }, 60000);\n    }\n\n    /**\n     * Disable automatic time of day updates\n     */\n    disableAutomaticTimeOfDay() {\n        if (this.timeUpdateInterval) {\n            clearInterval(this.timeUpdateInterval);\n            this.timeUpdateInterval = null;\n        }\n    }\n\n    /**\n     * Clean up resources\n     */\n    destroy() {\n        this.disableAutomaticTimeOfDay();\n        this.offscreenCanvas = null;\n        this.offscreenCtx = null;\n    }\n}\n\nexport default SkyGenerator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}