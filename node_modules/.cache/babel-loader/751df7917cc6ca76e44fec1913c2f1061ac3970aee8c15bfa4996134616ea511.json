{"ast":null,"code":"const size = 48 * 3;\nconst images = [{\n  url: \"/images/clouds/Clouds-2.png\",\n  width: size,\n  height: size / 2\n}, {\n  url: \"/images/clouds/Clouds.png\",\n  width: size,\n  height: size / 2\n}];\nfunction GetBandSpeed(canvasHeight, yCoord) {\n  const numBands = 6;\n  const bandHeight = Math.ceil(canvasHeight / numBands);\n  const bandSpeedModifier = 0.1;\n  for (let i = 1; i <= numBands; i++) {\n    const bandStart = (i - 1) * bandHeight;\n    const bandEnd = bandStart + bandHeight;\n    if (yCoord >= bandStart && yCoord < bandEnd) {\n      return 0.2 + bandSpeedModifier * i;\n    }\n  }\n\n  // Default return if yCoord doesn't fall in any defined band\n  return 0.2;\n}\n_c = GetBandSpeed;\nfunction CloudSprite(getRandomNumber, canvas, coords) {\n  return {\n    x: coords.x,\n    y: coords.y,\n    width: size,\n    height: size / 2,\n    speed: .25 + GetBandSpeed(canvas.height, coords.y),\n    getNextImage: () => {\n      const image = images[getRandomNumber(0, images.length - 1)];\n      return image;\n    }\n  };\n}\n_c2 = CloudSprite;\nexport default CloudSprite;\nvar _c, _c2;\n$RefreshReg$(_c, \"GetBandSpeed\");\n$RefreshReg$(_c2, \"CloudSprite\");","map":{"version":3,"names":["size","images","url","width","height","GetBandSpeed","canvasHeight","yCoord","numBands","bandHeight","Math","ceil","bandSpeedModifier","i","bandStart","bandEnd","_c","CloudSprite","getRandomNumber","canvas","coords","x","y","speed","getNextImage","image","length","_c2","$RefreshReg$"],"sources":["/Users/brentdalling/Projects/code-camp-event-slider/src/components/Canvas/Sprites/CloudSprite.js"],"sourcesContent":["const size = 48 * 3;\n\nconst images = [\n    {\n        url: \"/images/clouds/Clouds-2.png\",\n        width: size,\n        height: size / 2,\n    },\n    {\n        url: \"/images/clouds/Clouds.png\",\n        width: size,\n        height: size / 2,\n    },\n];\n\nfunction GetBandSpeed(canvasHeight, yCoord) {\n    const numBands = 6;\n    const bandHeight = Math.ceil(canvasHeight / numBands);\n    const bandSpeedModifier = 0.1;\n\n    for (let i = 1; i <= numBands; i++) {\n        const bandStart = (i - 1) * bandHeight;\n        const bandEnd = bandStart + bandHeight;\n\n        if (yCoord >= bandStart && yCoord < bandEnd) {\n            return 0.2 + (bandSpeedModifier * i);\n        }\n    }\n    \n    // Default return if yCoord doesn't fall in any defined band\n    return 0.2;\n}\n\n\n\nfunction CloudSprite(getRandomNumber, canvas, coords) {\n    return {\n        x: coords.x,\n        y: coords.y,\n        width: size,\n        height: size / 2,\n        speed: .25 + GetBandSpeed(canvas.height, coords.y),\n        getNextImage: () => {\n            const image = images[getRandomNumber(0, images.length - 1)];\n            return image;\n        },\n    };\n}\n\nexport default CloudSprite;\n"],"mappings":"AAAA,MAAMA,IAAI,GAAG,EAAE,GAAG,CAAC;AAEnB,MAAMC,MAAM,GAAG,CACX;EACIC,GAAG,EAAE,6BAA6B;EAClCC,KAAK,EAAEH,IAAI;EACXI,MAAM,EAAEJ,IAAI,GAAG;AACnB,CAAC,EACD;EACIE,GAAG,EAAE,2BAA2B;EAChCC,KAAK,EAAEH,IAAI;EACXI,MAAM,EAAEJ,IAAI,GAAG;AACnB,CAAC,CACJ;AAED,SAASK,YAAYA,CAACC,YAAY,EAAEC,MAAM,EAAE;EACxC,MAAMC,QAAQ,GAAG,CAAC;EAClB,MAAMC,UAAU,GAAGC,IAAI,CAACC,IAAI,CAACL,YAAY,GAAGE,QAAQ,CAAC;EACrD,MAAMI,iBAAiB,GAAG,GAAG;EAE7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIL,QAAQ,EAAEK,CAAC,EAAE,EAAE;IAChC,MAAMC,SAAS,GAAG,CAACD,CAAC,GAAG,CAAC,IAAIJ,UAAU;IACtC,MAAMM,OAAO,GAAGD,SAAS,GAAGL,UAAU;IAEtC,IAAIF,MAAM,IAAIO,SAAS,IAAIP,MAAM,GAAGQ,OAAO,EAAE;MACzC,OAAO,GAAG,GAAIH,iBAAiB,GAAGC,CAAE;IACxC;EACJ;;EAEA;EACA,OAAO,GAAG;AACd;AAACG,EAAA,GAhBQX,YAAY;AAoBrB,SAASY,WAAWA,CAACC,eAAe,EAAEC,MAAM,EAAEC,MAAM,EAAE;EAClD,OAAO;IACHC,CAAC,EAAED,MAAM,CAACC,CAAC;IACXC,CAAC,EAAEF,MAAM,CAACE,CAAC;IACXnB,KAAK,EAAEH,IAAI;IACXI,MAAM,EAAEJ,IAAI,GAAG,CAAC;IAChBuB,KAAK,EAAE,GAAG,GAAGlB,YAAY,CAACc,MAAM,CAACf,MAAM,EAAEgB,MAAM,CAACE,CAAC,CAAC;IAClDE,YAAY,EAAEA,CAAA,KAAM;MAChB,MAAMC,KAAK,GAAGxB,MAAM,CAACiB,eAAe,CAAC,CAAC,EAAEjB,MAAM,CAACyB,MAAM,GAAG,CAAC,CAAC,CAAC;MAC3D,OAAOD,KAAK;IAChB;EACJ,CAAC;AACL;AAACE,GAAA,GAZQV,WAAW;AAcpB,eAAeA,WAAW;AAAC,IAAAD,EAAA,EAAAW,GAAA;AAAAC,YAAA,CAAAZ,EAAA;AAAAY,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}