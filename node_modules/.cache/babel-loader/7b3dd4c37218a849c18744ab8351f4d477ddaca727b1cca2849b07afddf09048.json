{"ast":null,"code":"/**\n * Color Palette System for Procedural Graphics\n * Provides consistent color schemes for different times of day and seasons\n */\n\nexport class ColorPalette {\n  constructor() {\n    this.palettes = {\n      dawn: {\n        skyTop: '#2C1810',\n        skyHorizon: '#FF6B35',\n        skyMid: '#FF8C42',\n        cloudBase: '#FFB84D',\n        cloudHighlight: '#FFFFFF',\n        sunColor: '#FFDD44'\n      },\n      day: {\n        skyTop: '#4A90E2',\n        skyHorizon: '#87CEEB',\n        skyMid: '#7EC8E3',\n        cloudBase: '#FFFFFF',\n        cloudHighlight: '#F8F8FF',\n        sunColor: '#FFD700'\n      },\n      dusk: {\n        skyTop: '#1A1A2E',\n        skyHorizon: '#FF6B9D',\n        skyMid: '#C44569',\n        cloudBase: '#8B4A6B',\n        cloudHighlight: '#FFB3D9',\n        sunColor: '#FF4757'\n      },\n      night: {\n        skyTop: '#0B0B1F',\n        skyHorizon: '#1A1A3A',\n        skyMid: '#141430',\n        cloudBase: '#2A2A4A',\n        cloudHighlight: '#3A3A5A',\n        sunColor: '#E6E6FA' // Moon color - pale lavender\n      }\n    };\n    this.currentTimeOfDay = 'day';\n    this.transitionProgress = 0;\n  }\n\n  /**\n   * Set the current time of day\n   * @param {string} timeOfDay - 'dawn', 'day', 'dusk', or 'night'\n   */\n  setTimeOfDay(timeOfDay) {\n    if (this.palettes[timeOfDay]) {\n      this.currentTimeOfDay = timeOfDay;\n    }\n  }\n\n  /**\n   * Get current palette\n   * @returns {Object} Current color palette\n   */\n  getCurrentPalette() {\n    return this.palettes[this.currentTimeOfDay];\n  }\n\n  /**\n   * Get a color from the current palette\n   * @param {string} colorKey - Key of the color to retrieve\n   * @returns {string} Hex color string\n   */\n  getColor(colorKey) {\n    return this.palettes[this.currentTimeOfDay][colorKey] || '#FFFFFF';\n  }\n\n  /**\n   * Interpolate between two colors\n   * @param {string} color1 - First color in hex format\n   * @param {string} color2 - Second color in hex format\n   * @param {number} factor - Interpolation factor (0-1)\n   * @returns {string} Interpolated color in hex format\n   */\n  interpolateColors(color1, color2, factor) {\n    const rgb1 = this.hexToRgb(color1);\n    const rgb2 = this.hexToRgb(color2);\n    const r = Math.round(rgb1.r + (rgb2.r - rgb1.r) * factor);\n    const g = Math.round(rgb1.g + (rgb2.g - rgb1.g) * factor);\n    const b = Math.round(rgb1.b + (rgb2.b - rgb1.b) * factor);\n    return this.rgbToHex(r, g, b);\n  }\n\n  /**\n   * Convert hex color to RGB object\n   * @param {string} hex - Hex color string\n   * @returns {Object} RGB object with r, g, b properties\n   */\n  hexToRgb(hex) {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n  }\n\n  /**\n   * Convert RGB values to hex color string\n   * @param {number} r - Red value (0-255)\n   * @param {number} g - Green value (0-255)\n   * @param {number} b - Blue value (0-255)\n   * @returns {string} Hex color string\n   */\n  rgbToHex(r, g, b) {\n    return \"#\" + (r << 16 | g << 8 | b).toString(16).padStart(6, '0');\n  }\n\n  /**\n   * Get time-based automatic palette based on current time\n   * @returns {string} Time of day string\n   */\n  getTimeBasedPalette() {\n    const hour = new Date().getHours();\n    if (hour >= 5 && hour < 8) return 'dawn';\n    if (hour >= 8 && hour < 17) return 'day';\n    if (hour >= 17 && hour < 20) return 'dusk';\n    return 'night';\n  }\n\n  /**\n   * Automatically set palette based on current time\n   */\n  setAutomaticTimeOfDay() {\n    this.setTimeOfDay(this.getTimeBasedPalette());\n  }\n}\nexport default ColorPalette;","map":{"version":3,"names":["ColorPalette","constructor","palettes","dawn","skyTop","skyHorizon","skyMid","cloudBase","cloudHighlight","sunColor","day","dusk","night","currentTimeOfDay","transitionProgress","setTimeOfDay","timeOfDay","getCurrentPalette","getColor","colorKey","interpolateColors","color1","color2","factor","rgb1","hexToRgb","rgb2","r","Math","round","g","b","rgbToHex","hex","result","exec","parseInt","toString","padStart","getTimeBasedPalette","hour","Date","getHours","setAutomaticTimeOfDay"],"sources":["/Users/brentdalling/Projects/code-camp-event-slider/src/graphics/utils/ColorPalette.js"],"sourcesContent":["/**\n * Color Palette System for Procedural Graphics\n * Provides consistent color schemes for different times of day and seasons\n */\n\nexport class ColorPalette {\n  constructor() {\n    this.palettes = {\n      dawn: {\n        skyTop: '#2C1810',\n        skyHorizon: '#FF6B35',\n        skyMid: '#FF8C42',\n        cloudBase: '#FFB84D',\n        cloudHighlight: '#FFFFFF',\n        sunColor: '#FFDD44'\n      },\n      day: {\n        skyTop: '#4A90E2',\n        skyHorizon: '#87CEEB',\n        skyMid: '#7EC8E3',\n        cloudBase: '#FFFFFF',\n        cloudHighlight: '#F8F8FF',\n        sunColor: '#FFD700'\n      },\n      dusk: {\n        skyTop: '#1A1A2E',\n        skyHorizon: '#FF6B9D',\n        skyMid: '#C44569',\n        cloudBase: '#8B4A6B',\n        cloudHighlight: '#FFB3D9',\n        sunColor: '#FF4757'\n      },\n      night: {\n        skyTop: '#0B0B1F',\n        skyHorizon: '#1A1A3A',\n        skyMid: '#141430',\n        cloudBase: '#2A2A4A',\n        cloudHighlight: '#3A3A5A',\n        sunColor: '#E6E6FA' // Moon color - pale lavender\n      }\n    };\n\n    this.currentTimeOfDay = 'day';\n    this.transitionProgress = 0;\n  }\n\n  /**\n   * Set the current time of day\n   * @param {string} timeOfDay - 'dawn', 'day', 'dusk', or 'night'\n   */\n  setTimeOfDay(timeOfDay) {\n    if (this.palettes[timeOfDay]) {\n      this.currentTimeOfDay = timeOfDay;\n    }\n  }\n\n  /**\n   * Get current palette\n   * @returns {Object} Current color palette\n   */\n  getCurrentPalette() {\n    return this.palettes[this.currentTimeOfDay];\n  }\n\n  /**\n   * Get a color from the current palette\n   * @param {string} colorKey - Key of the color to retrieve\n   * @returns {string} Hex color string\n   */\n  getColor(colorKey) {\n    return this.palettes[this.currentTimeOfDay][colorKey] || '#FFFFFF';\n  }\n\n  /**\n   * Interpolate between two colors\n   * @param {string} color1 - First color in hex format\n   * @param {string} color2 - Second color in hex format\n   * @param {number} factor - Interpolation factor (0-1)\n   * @returns {string} Interpolated color in hex format\n   */\n  interpolateColors(color1, color2, factor) {\n    const rgb1 = this.hexToRgb(color1);\n    const rgb2 = this.hexToRgb(color2);\n    \n    const r = Math.round(rgb1.r + (rgb2.r - rgb1.r) * factor);\n    const g = Math.round(rgb1.g + (rgb2.g - rgb1.g) * factor);\n    const b = Math.round(rgb1.b + (rgb2.b - rgb1.b) * factor);\n    \n    return this.rgbToHex(r, g, b);\n  }\n\n  /**\n   * Convert hex color to RGB object\n   * @param {string} hex - Hex color string\n   * @returns {Object} RGB object with r, g, b properties\n   */\n  hexToRgb(hex) {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n  }\n\n  /**\n   * Convert RGB values to hex color string\n   * @param {number} r - Red value (0-255)\n   * @param {number} g - Green value (0-255)\n   * @param {number} b - Blue value (0-255)\n   * @returns {string} Hex color string\n   */\n  rgbToHex(r, g, b) {\n    return \"#\" + ((r << 16) | (g << 8) | b).toString(16).padStart(6, '0');\n  }\n\n  /**\n   * Get time-based automatic palette based on current time\n   * @returns {string} Time of day string\n   */\n  getTimeBasedPalette() {\n    const hour = new Date().getHours();\n    \n    if (hour >= 5 && hour < 8) return 'dawn';\n    if (hour >= 8 && hour < 17) return 'day';\n    if (hour >= 17 && hour < 20) return 'dusk';\n    return 'night';\n  }\n\n  /**\n   * Automatically set palette based on current time\n   */\n  setAutomaticTimeOfDay() {\n    this.setTimeOfDay(this.getTimeBasedPalette());\n  }\n}\n\nexport default ColorPalette;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}