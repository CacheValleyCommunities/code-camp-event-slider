{"ast":null,"code":"/**\n * Procedural Cloud Element for Canvas System\n * Integrates CloudGenerator with the existing Canvas layer system\n */\n\nimport CloudGenerator from '../../../graphics/generators/CloudGenerator.js';\nfunction ProceduralCloud(canvas, options = {}) {\n  const cloudGenerator = new CloudGenerator(canvas, {\n    timeOfDay: options.timeOfDay || 'night',\n    cloudTypes: options.cloudTypes || ['cumulus', 'stratus'],\n    density: options.density || 0.4,\n    size: options.size || 0.8,\n    opacity: options.opacity || 0.6,\n    speed: options.speed || 0.3,\n    animationSpeed: options.animationSpeed || 0.0005,\n    updateInterval: options.updateInterval || 15000,\n    ...options\n  });\n  const cloud = cloudGenerator.createCloud({\n    x: options.x || canvas.width,\n    y: options.y || canvas.height * 0.2,\n    type: options.cloudType,\n    widthMultiplier: options.widthMultiplier,\n    heightMultiplier: options.heightMultiplier\n  });\n  return {\n    ...cloud,\n    cloudGenerator: cloudGenerator,\n    // Enhanced update method\n    update(deltaTime = 16) {\n      // Update cloud generator\n      this.cloudGenerator.update(deltaTime);\n\n      // Move cloud\n      this.x -= this.speed;\n\n      // Reset position when cloud moves off screen\n      if (this.x + this.width < 0) {\n        this.x = canvas.width + this.width;\n        // Optionally regenerate cloud for variety\n        if (Math.random() < 0.3) {\n          const newCloud = this.cloudGenerator.createCloud({\n            x: this.x,\n            y: this.y,\n            widthMultiplier: this.cloudGenerator.getRandomFloat(0.4, 1.0),\n            // Smaller variation\n            heightMultiplier: this.cloudGenerator.getRandomFloat(0.3, 0.7) // Smaller variation\n          });\n          this.cloudCanvas = newCloud.cloudCanvas;\n          this.width = newCloud.width;\n          this.height = newCloud.height;\n          this.cloudType = newCloud.cloudType;\n        }\n      }\n    },\n    // Enhanced render method\n    render(ctx, offsetX = 0) {\n      ctx.save();\n      ctx.globalAlpha = this.opacity;\n\n      // Apply parallax offset\n      const parallaxX = this.x - offsetX * 0.3; // Clouds move slower than foreground\n\n      ctx.drawImage(this.cloudCanvas, parallaxX, this.y, this.width, this.height);\n      ctx.restore();\n    },\n    // Configuration methods\n    setTimeOfDay(timeOfDay) {\n      this.cloudGenerator.setTimeOfDay(timeOfDay);\n    },\n    updateOptions(newOptions) {\n      this.cloudGenerator.updateOptions(newOptions);\n    },\n    // Cleanup\n    destroy() {\n      this.cloudGenerator.destroy();\n    }\n  };\n}\n_c = ProceduralCloud;\nexport default ProceduralCloud;\nvar _c;\n$RefreshReg$(_c, \"ProceduralCloud\");","map":{"version":3,"names":["CloudGenerator","ProceduralCloud","canvas","options","cloudGenerator","timeOfDay","cloudTypes","density","size","opacity","speed","animationSpeed","updateInterval","cloud","createCloud","x","width","y","height","type","cloudType","widthMultiplier","heightMultiplier","update","deltaTime","Math","random","newCloud","getRandomFloat","cloudCanvas","render","ctx","offsetX","save","globalAlpha","parallaxX","drawImage","restore","setTimeOfDay","updateOptions","newOptions","destroy","_c","$RefreshReg$"],"sources":["/Users/brentdalling/Projects/code-camp-event-slider/src/components/Canvas/Sprites/ProceduralCloud.js"],"sourcesContent":["/**\n * Procedural Cloud Element for Canvas System\n * Integrates CloudGenerator with the existing Canvas layer system\n */\n\nimport CloudGenerator from '../../../graphics/generators/CloudGenerator.js';\n\nfunction ProceduralCloud(canvas, options = {}) {\n    const cloudGenerator = new CloudGenerator(canvas, {\n        timeOfDay: options.timeOfDay || 'night',\n        cloudTypes: options.cloudTypes || ['cumulus', 'stratus'],\n        density: options.density || 0.4,\n        size: options.size || 0.8,\n        opacity: options.opacity || 0.6,\n        speed: options.speed || 0.3,\n        animationSpeed: options.animationSpeed || 0.0005,\n        updateInterval: options.updateInterval || 15000,\n        ...options\n    });\n\n    const cloud = cloudGenerator.createCloud({\n        x: options.x || canvas.width,\n        y: options.y || canvas.height * 0.2,\n        type: options.cloudType,\n        widthMultiplier: options.widthMultiplier,\n        heightMultiplier: options.heightMultiplier\n    });\n\n    return {\n        ...cloud,\n        cloudGenerator: cloudGenerator,\n\n        // Enhanced update method\n        update(deltaTime = 16) {\n            // Update cloud generator\n            this.cloudGenerator.update(deltaTime);\n\n            // Move cloud\n            this.x -= this.speed;\n\n            // Reset position when cloud moves off screen\n            if (this.x + this.width < 0) {\n                this.x = canvas.width + this.width;\n                // Optionally regenerate cloud for variety\n                if (Math.random() < 0.3) {\n                    const newCloud = this.cloudGenerator.createCloud({\n                        x: this.x,\n                        y: this.y,\n                        widthMultiplier: this.cloudGenerator.getRandomFloat(0.4, 1.0), // Smaller variation\n                        heightMultiplier: this.cloudGenerator.getRandomFloat(0.3, 0.7) // Smaller variation\n                    });\n                    this.cloudCanvas = newCloud.cloudCanvas;\n                    this.width = newCloud.width;\n                    this.height = newCloud.height;\n                    this.cloudType = newCloud.cloudType;\n                }\n            }\n        },\n\n        // Enhanced render method\n        render(ctx, offsetX = 0) {\n            ctx.save();\n            ctx.globalAlpha = this.opacity;\n\n            // Apply parallax offset\n            const parallaxX = this.x - offsetX * 0.3; // Clouds move slower than foreground\n\n            ctx.drawImage(this.cloudCanvas, parallaxX, this.y, this.width, this.height);\n            ctx.restore();\n        },\n\n        // Configuration methods\n        setTimeOfDay(timeOfDay) {\n            this.cloudGenerator.setTimeOfDay(timeOfDay);\n        },\n\n        updateOptions(newOptions) {\n            this.cloudGenerator.updateOptions(newOptions);\n        },\n\n        // Cleanup\n        destroy() {\n            this.cloudGenerator.destroy();\n        }\n    };\n}\n\nexport default ProceduralCloud;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}