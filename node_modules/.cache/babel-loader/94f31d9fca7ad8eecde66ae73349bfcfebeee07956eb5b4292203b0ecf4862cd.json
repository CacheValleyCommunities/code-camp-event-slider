{"ast":null,"code":"/**\n * Noise Generator for Procedural Graphics\n * Provides various noise functions for creating natural-looking patterns\n */\n\nexport class NoiseGenerator {\n  constructor(seed = Math.random() * 1000) {\n    this.seed = seed;\n    this.permutation = this.generatePermutation();\n  }\n\n  /**\n   * Generate permutation table for Perlin noise\n   * @returns {Array} Permutation array\n   */\n  generatePermutation() {\n    const p = [];\n    for (let i = 0; i < 256; i++) {\n      p[i] = i;\n    }\n\n    // Shuffle array using seeded random\n    for (let i = 255; i > 0; i--) {\n      const j = Math.floor(this.seededRandom() * (i + 1));\n      [p[i], p[j]] = [p[j], p[i]];\n    }\n\n    // Duplicate array\n    for (let i = 0; i < 256; i++) {\n      p[256 + i] = p[i];\n    }\n    return p;\n  }\n\n  /**\n   * Seeded random number generator\n   * @returns {number} Random number between 0 and 1\n   */\n  seededRandom() {\n    this.seed = (this.seed * 9301 + 49297) % 233280;\n    return this.seed / 233280;\n  }\n\n  /**\n   * Fade function for Perlin noise interpolation\n   * @param {number} t - Input value\n   * @returns {number} Smoothed value\n   */\n  fade(t) {\n    return t * t * t * (t * (t * 6 - 15) + 10);\n  }\n\n  /**\n   * Linear interpolation\n   * @param {number} a - First value\n   * @param {number} b - Second value\n   * @param {number} t - Interpolation factor\n   * @returns {number} Interpolated value\n   */\n  lerp(a, b, t) {\n    return a + t * (b - a);\n  }\n\n  /**\n   * Gradient function for Perlin noise\n   * @param {number} hash - Hash value\n   * @param {number} x - X coordinate\n   * @param {number} y - Y coordinate\n   * @returns {number} Gradient value\n   */\n  grad(hash, x, y) {\n    const h = hash & 15;\n    const u = h < 8 ? x : y;\n    const v = h < 4 ? y : h === 12 || h === 14 ? x : 0;\n    return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);\n  }\n\n  /**\n   * 2D Perlin noise function\n   * @param {number} x - X coordinate\n   * @param {number} y - Y coordinate\n   * @returns {number} Noise value between -1 and 1\n   */\n  perlin2D(x, y) {\n    const X = Math.floor(x) & 255;\n    const Y = Math.floor(y) & 255;\n    x -= Math.floor(x);\n    y -= Math.floor(y);\n    const u = this.fade(x);\n    const v = this.fade(y);\n    const A = this.permutation[X] + Y;\n    const AA = this.permutation[A];\n    const AB = this.permutation[A + 1];\n    const B = this.permutation[X + 1] + Y;\n    const BA = this.permutation[B];\n    const BB = this.permutation[B + 1];\n    return this.lerp(this.lerp(this.grad(this.permutation[AA], x, y), this.grad(this.permutation[BA], x - 1, y), u), this.lerp(this.grad(this.permutation[AB], x, y - 1), this.grad(this.permutation[BB], x - 1, y - 1), u), v);\n  }\n\n  /**\n   * Octave-based noise for more complex patterns\n   * @param {number} x - X coordinate\n   * @param {number} y - Y coordinate\n   * @param {number} octaves - Number of octaves\n   * @param {number} persistence - Persistence value\n   * @returns {number} Noise value\n   */\n  octaveNoise2D(x, y, octaves = 4, persistence = 0.5) {\n    let value = 0;\n    let amplitude = 1;\n    let frequency = 1;\n    let maxValue = 0;\n    for (let i = 0; i < octaves; i++) {\n      value += this.perlin2D(x * frequency, y * frequency) * amplitude;\n      maxValue += amplitude;\n      amplitude *= persistence;\n      frequency *= 2;\n    }\n    return value / maxValue;\n  }\n\n  /**\n   * Simple 1D noise for basic variations\n   * @param {number} x - X coordinate\n   * @returns {number} Noise value between -1 and 1\n   */\n  noise1D(x) {\n    const intX = Math.floor(x);\n    const fracX = x - intX;\n    const a = this.hash(intX);\n    const b = this.hash(intX + 1);\n    return this.lerp(a, b, this.fade(fracX));\n  }\n\n  /**\n   * Simple hash function\n   * @param {number} x - Input value\n   * @returns {number} Hash value between -1 and 1\n   */\n  hash(x) {\n    x = (x >> 16 ^ x) * 0x45d9f3b;\n    x = (x >> 16 ^ x) * 0x45d9f3b;\n    x = x >> 16 ^ x;\n    return (x & 0x7fffffff) / 0x7fffffff * 2 - 1;\n  }\n\n  /**\n   * Generate texture noise for cloud-like patterns\n   * @param {number} x - X coordinate\n   * @param {number} y - Y coordinate\n   * @param {number} scale - Scale factor\n   * @returns {number} Texture noise value between 0 and 1\n   */\n  textureNoise(x, y, scale = 0.01) {\n    const noise1 = this.octaveNoise2D(x * scale, y * scale, 4, 0.5);\n    const noise2 = this.octaveNoise2D(x * scale * 2, y * scale * 2, 2, 0.3);\n    return Math.max(0, Math.min(1, (noise1 + noise2 * 0.5 + 1) * 0.5));\n  }\n}\nexport default NoiseGenerator;","map":{"version":3,"names":["NoiseGenerator","constructor","seed","Math","random","permutation","generatePermutation","p","i","j","floor","seededRandom","fade","t","lerp","a","b","grad","hash","x","y","h","u","v","perlin2D","X","Y","A","AA","AB","B","BA","BB","octaveNoise2D","octaves","persistence","value","amplitude","frequency","maxValue","noise1D","intX","fracX","textureNoise","scale","noise1","noise2","max","min"],"sources":["/Users/brentdalling/Projects/code-camp-event-slider/src/graphics/utils/NoiseGenerator.js"],"sourcesContent":["/**\n * Noise Generator for Procedural Graphics\n * Provides various noise functions for creating natural-looking patterns\n */\n\nexport class NoiseGenerator {\n  constructor(seed = Math.random() * 1000) {\n    this.seed = seed;\n    this.permutation = this.generatePermutation();\n  }\n\n  /**\n   * Generate permutation table for Perlin noise\n   * @returns {Array} Permutation array\n   */\n  generatePermutation() {\n    const p = [];\n    for (let i = 0; i < 256; i++) {\n      p[i] = i;\n    }\n    \n    // Shuffle array using seeded random\n    for (let i = 255; i > 0; i--) {\n      const j = Math.floor(this.seededRandom() * (i + 1));\n      [p[i], p[j]] = [p[j], p[i]];\n    }\n    \n    // Duplicate array\n    for (let i = 0; i < 256; i++) {\n      p[256 + i] = p[i];\n    }\n    \n    return p;\n  }\n\n  /**\n   * Seeded random number generator\n   * @returns {number} Random number between 0 and 1\n   */\n  seededRandom() {\n    this.seed = (this.seed * 9301 + 49297) % 233280;\n    return this.seed / 233280;\n  }\n\n  /**\n   * Fade function for Perlin noise interpolation\n   * @param {number} t - Input value\n   * @returns {number} Smoothed value\n   */\n  fade(t) {\n    return t * t * t * (t * (t * 6 - 15) + 10);\n  }\n\n  /**\n   * Linear interpolation\n   * @param {number} a - First value\n   * @param {number} b - Second value\n   * @param {number} t - Interpolation factor\n   * @returns {number} Interpolated value\n   */\n  lerp(a, b, t) {\n    return a + t * (b - a);\n  }\n\n  /**\n   * Gradient function for Perlin noise\n   * @param {number} hash - Hash value\n   * @param {number} x - X coordinate\n   * @param {number} y - Y coordinate\n   * @returns {number} Gradient value\n   */\n  grad(hash, x, y) {\n    const h = hash & 15;\n    const u = h < 8 ? x : y;\n    const v = h < 4 ? y : h === 12 || h === 14 ? x : 0;\n    return ((h & 1) === 0 ? u : -u) + ((h & 2) === 0 ? v : -v);\n  }\n\n  /**\n   * 2D Perlin noise function\n   * @param {number} x - X coordinate\n   * @param {number} y - Y coordinate\n   * @returns {number} Noise value between -1 and 1\n   */\n  perlin2D(x, y) {\n    const X = Math.floor(x) & 255;\n    const Y = Math.floor(y) & 255;\n    \n    x -= Math.floor(x);\n    y -= Math.floor(y);\n    \n    const u = this.fade(x);\n    const v = this.fade(y);\n    \n    const A = this.permutation[X] + Y;\n    const AA = this.permutation[A];\n    const AB = this.permutation[A + 1];\n    const B = this.permutation[X + 1] + Y;\n    const BA = this.permutation[B];\n    const BB = this.permutation[B + 1];\n    \n    return this.lerp(\n      this.lerp(this.grad(this.permutation[AA], x, y),\n                this.grad(this.permutation[BA], x - 1, y), u),\n      this.lerp(this.grad(this.permutation[AB], x, y - 1),\n                this.grad(this.permutation[BB], x - 1, y - 1), u), v\n    );\n  }\n\n  /**\n   * Octave-based noise for more complex patterns\n   * @param {number} x - X coordinate\n   * @param {number} y - Y coordinate\n   * @param {number} octaves - Number of octaves\n   * @param {number} persistence - Persistence value\n   * @returns {number} Noise value\n   */\n  octaveNoise2D(x, y, octaves = 4, persistence = 0.5) {\n    let value = 0;\n    let amplitude = 1;\n    let frequency = 1;\n    let maxValue = 0;\n    \n    for (let i = 0; i < octaves; i++) {\n      value += this.perlin2D(x * frequency, y * frequency) * amplitude;\n      maxValue += amplitude;\n      amplitude *= persistence;\n      frequency *= 2;\n    }\n    \n    return value / maxValue;\n  }\n\n  /**\n   * Simple 1D noise for basic variations\n   * @param {number} x - X coordinate\n   * @returns {number} Noise value between -1 and 1\n   */\n  noise1D(x) {\n    const intX = Math.floor(x);\n    const fracX = x - intX;\n    \n    const a = this.hash(intX);\n    const b = this.hash(intX + 1);\n    \n    return this.lerp(a, b, this.fade(fracX));\n  }\n\n  /**\n   * Simple hash function\n   * @param {number} x - Input value\n   * @returns {number} Hash value between -1 and 1\n   */\n  hash(x) {\n    x = ((x >> 16) ^ x) * 0x45d9f3b;\n    x = ((x >> 16) ^ x) * 0x45d9f3b;\n    x = (x >> 16) ^ x;\n    return ((x & 0x7fffffff) / 0x7fffffff) * 2 - 1;\n  }\n\n  /**\n   * Generate texture noise for cloud-like patterns\n   * @param {number} x - X coordinate\n   * @param {number} y - Y coordinate\n   * @param {number} scale - Scale factor\n   * @returns {number} Texture noise value between 0 and 1\n   */\n  textureNoise(x, y, scale = 0.01) {\n    const noise1 = this.octaveNoise2D(x * scale, y * scale, 4, 0.5);\n    const noise2 = this.octaveNoise2D(x * scale * 2, y * scale * 2, 2, 0.3);\n    return Math.max(0, Math.min(1, (noise1 + noise2 * 0.5 + 1) * 0.5));\n  }\n}\n\nexport default NoiseGenerator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}