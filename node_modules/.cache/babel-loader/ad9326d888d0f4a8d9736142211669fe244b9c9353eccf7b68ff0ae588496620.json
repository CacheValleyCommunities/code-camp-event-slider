{"ast":null,"code":"/**\n * Procedural Tree Element for Canvas System\n * Integrates TreeGenerator with the existing Canvas layer system\n */\n\nimport TreeGenerator from '../../../graphics/generators/TreeGenerator.js';\nfunction ProceduralTree(canvas, options = {}) {\n  const treeGenerator = new TreeGenerator(canvas, {\n    timeOfDay: options.timeOfDay || 'night',\n    treeTypes: options.treeTypes || ['birch', 'fir', 'oak', 'jungle'],\n    season: options.season || 'summer',\n    pixelSize: options.pixelSize || 8,\n    windStrength: options.windStrength || 0.1,\n    animationSpeed: options.animationSpeed || 0.001,\n    ...options\n  });\n  const tree = treeGenerator.createTree({\n    x: options.x || canvas.width,\n    y: options.y || canvas.height - 100,\n    // Anchor to ground\n    type: options.treeType,\n    widthMultiplier: options.widthMultiplier,\n    heightMultiplier: options.heightMultiplier,\n    speed: options.speed,\n    opacity: options.opacity\n  });\n  return {\n    ...tree,\n    treeGenerator: treeGenerator,\n    // Enhanced update method\n    update(deltaTime = 16) {\n      // Update tree generator\n      this.treeGenerator.update(deltaTime);\n\n      // Move tree with parallax\n      this.x -= this.speed;\n\n      // Reset position when tree moves off screen\n      if (this.x + this.width < 0) {\n        this.x = canvas.width + this.width;\n        // Optionally regenerate tree for variety\n        if (Math.random() < 0.2) {\n          const newTree = this.treeGenerator.createTree({\n            x: this.x,\n            y: this.y,\n            widthMultiplier: this.treeGenerator.getRandomFloat(0.8, 1.2),\n            heightMultiplier: this.treeGenerator.getRandomFloat(1.5, 2.5),\n            speed: this.speed,\n            opacity: this.opacity\n          });\n          this.treeCanvas = newTree.treeCanvas;\n          this.width = newTree.width;\n          this.height = newTree.height;\n          this.treeType = newTree.treeType;\n        }\n      }\n    },\n    // Enhanced render method\n    render(ctx, offsetX = 0) {\n      ctx.save();\n      ctx.globalAlpha = this.opacity;\n\n      // Apply parallax offset\n      const parallaxX = this.x - offsetX * 0.7; // Trees move with middle parallax\n\n      ctx.drawImage(this.treeCanvas, parallaxX, this.y, this.width, this.height);\n      ctx.restore();\n    },\n    // Configuration methods\n    setTimeOfDay(timeOfDay) {\n      this.treeGenerator.setTimeOfDay(timeOfDay);\n    },\n    setSeason(season) {\n      this.treeGenerator.setSeason(season);\n    },\n    updateOptions(newOptions) {\n      this.treeGenerator.updateOptions(newOptions);\n    },\n    // Cleanup\n    destroy() {\n      this.treeGenerator.destroy();\n    }\n  };\n}\n_c = ProceduralTree;\nexport default ProceduralTree;\nvar _c;\n$RefreshReg$(_c, \"ProceduralTree\");","map":{"version":3,"names":["TreeGenerator","ProceduralTree","canvas","options","treeGenerator","timeOfDay","treeTypes","season","pixelSize","windStrength","animationSpeed","tree","createTree","x","width","y","height","type","treeType","widthMultiplier","heightMultiplier","speed","opacity","update","deltaTime","Math","random","newTree","getRandomFloat","treeCanvas","render","ctx","offsetX","save","globalAlpha","parallaxX","drawImage","restore","setTimeOfDay","setSeason","updateOptions","newOptions","destroy","_c","$RefreshReg$"],"sources":["/Users/brentdalling/Projects/code-camp-event-slider/src/components/Canvas/Sprites/ProceduralTree.js"],"sourcesContent":["/**\n * Procedural Tree Element for Canvas System\n * Integrates TreeGenerator with the existing Canvas layer system\n */\n\nimport TreeGenerator from '../../../graphics/generators/TreeGenerator.js';\n\nfunction ProceduralTree(canvas, options = {}) {\n    const treeGenerator = new TreeGenerator(canvas, {\n        timeOfDay: options.timeOfDay || 'night',\n        treeTypes: options.treeTypes || ['birch', 'fir', 'oak', 'jungle'],\n        season: options.season || 'summer',\n        pixelSize: options.pixelSize || 8,\n        windStrength: options.windStrength || 0.1,\n        animationSpeed: options.animationSpeed || 0.001,\n        ...options\n    });\n\n    const tree = treeGenerator.createTree({\n        x: options.x || canvas.width,\n        y: options.y || canvas.height - 100, // Anchor to ground\n        type: options.treeType,\n        widthMultiplier: options.widthMultiplier,\n        heightMultiplier: options.heightMultiplier,\n        speed: options.speed,\n        opacity: options.opacity\n    });\n\n    return {\n        ...tree,\n        treeGenerator: treeGenerator,\n\n        // Enhanced update method\n        update(deltaTime = 16) {\n            // Update tree generator\n            this.treeGenerator.update(deltaTime);\n\n            // Move tree with parallax\n            this.x -= this.speed;\n\n            // Reset position when tree moves off screen\n            if (this.x + this.width < 0) {\n                this.x = canvas.width + this.width;\n                // Optionally regenerate tree for variety\n                if (Math.random() < 0.2) {\n                    const newTree = this.treeGenerator.createTree({\n                        x: this.x,\n                        y: this.y,\n                        widthMultiplier: this.treeGenerator.getRandomFloat(0.8, 1.2),\n                        heightMultiplier: this.treeGenerator.getRandomFloat(1.5, 2.5),\n                        speed: this.speed,\n                        opacity: this.opacity\n                    });\n                    this.treeCanvas = newTree.treeCanvas;\n                    this.width = newTree.width;\n                    this.height = newTree.height;\n                    this.treeType = newTree.treeType;\n                }\n            }\n        },\n\n        // Enhanced render method\n        render(ctx, offsetX = 0) {\n            ctx.save();\n            ctx.globalAlpha = this.opacity;\n\n            // Apply parallax offset\n            const parallaxX = this.x - offsetX * 0.7; // Trees move with middle parallax\n\n            ctx.drawImage(this.treeCanvas, parallaxX, this.y, this.width, this.height);\n            ctx.restore();\n        },\n\n        // Configuration methods\n        setTimeOfDay(timeOfDay) {\n            this.treeGenerator.setTimeOfDay(timeOfDay);\n        },\n\n        setSeason(season) {\n            this.treeGenerator.setSeason(season);\n        },\n\n        updateOptions(newOptions) {\n            this.treeGenerator.updateOptions(newOptions);\n        },\n\n        // Cleanup\n        destroy() {\n            this.treeGenerator.destroy();\n        }\n    };\n}\n\nexport default ProceduralTree;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}