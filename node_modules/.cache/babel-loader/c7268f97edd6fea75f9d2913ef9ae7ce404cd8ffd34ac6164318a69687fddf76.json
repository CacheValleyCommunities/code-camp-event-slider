{"ast":null,"code":"/**\n * Procedural Sky Generator\n * Creates dynamic sky backgrounds with gradient rendering and atmospheric effects\n */\n\nimport ColorPalette from '../utils/ColorPalette.js';\nimport NoiseGenerator from '../utils/NoiseGenerator.js';\nexport class SkyGenerator {\n  constructor(canvas, options = {}) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n    this.colorPalette = new ColorPalette();\n    this.noiseGenerator = new NoiseGenerator(options.seed || Math.random() * 1000);\n\n    // Configuration options\n    this.options = {\n      timeOfDay: options.timeOfDay || 'day',\n      enableNoise: options.enableNoise !== false,\n      noiseIntensity: options.noiseIntensity || 0.1,\n      gradientSteps: options.gradientSteps || 256,\n      atmosphericPerspective: options.atmosphericPerspective !== false,\n      sunPosition: options.sunPosition || {\n        x: 0.7,\n        y: 0.3\n      },\n      enableSun: options.enableSun !== false,\n      animationSpeed: options.animationSpeed || 0.001,\n      updateInterval: options.updateInterval || 10000,\n      // Update every 10 seconds\n      ...options\n    };\n    this.time = 0;\n    this.offscreenCanvas = document.createElement('canvas');\n    this.offscreenCtx = this.offscreenCanvas.getContext('2d');\n    this.offscreenCanvas.width = canvas.width;\n    this.offscreenCanvas.height = canvas.height;\n\n    // Initialize color palette\n    this.colorPalette.setTimeOfDay(this.options.timeOfDay);\n    this.generateSkyTexture();\n  }\n\n  /**\n   * Generate the base sky texture using gradients and noise\n   */\n  generateSkyTexture() {\n    const width = this.canvas.width;\n    const height = this.canvas.height;\n    const palette = this.colorPalette.getCurrentPalette();\n\n    // Create gradient from top to bottom\n    const gradient = this.offscreenCtx.createLinearGradient(0, 0, 0, height);\n\n    // Add gradient stops based on current palette\n    gradient.addColorStop(0, palette.skyTop);\n    gradient.addColorStop(0.3, palette.skyMid);\n    gradient.addColorStop(0.7, palette.skyHorizon);\n    gradient.addColorStop(1, palette.skyHorizon);\n\n    // Fill with gradient\n    this.offscreenCtx.fillStyle = gradient;\n    this.offscreenCtx.fillRect(0, 0, width, height);\n\n    // Add atmospheric noise if enabled\n    if (this.options.enableNoise) {\n      this.addAtmosphericNoise();\n    }\n\n    // Add sun if enabled\n    if (this.options.enableSun) {\n      this.addSun();\n    }\n  }\n\n  /**\n   * Add subtle atmospheric noise for texture\n   */\n  addAtmosphericNoise() {\n    const width = this.canvas.width;\n    const height = this.canvas.height;\n    const imageData = this.offscreenCtx.getImageData(0, 0, width, height);\n    const data = imageData.data;\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        const i = (y * width + x) * 4;\n\n        // Generate noise value\n        const noiseValue = this.noiseGenerator.octaveNoise2D(x * 0.002 + this.time, y * 0.002, 3, 0.5);\n\n        // Apply noise to each color channel\n        const noiseIntensity = this.options.noiseIntensity * 255;\n        const adjustment = noiseValue * noiseIntensity;\n        data[i] = Math.max(0, Math.min(255, data[i] + adjustment)); // Red\n        data[i + 1] = Math.max(0, Math.min(255, data[i + 1] + adjustment)); // Green\n        data[i + 2] = Math.max(0, Math.min(255, data[i + 2] + adjustment)); // Blue\n      }\n    }\n    this.offscreenCtx.putImageData(imageData, 0, 0);\n  }\n\n  /**\n   * Add sun or moon to the sky\n   */\n  addSun() {\n    const width = this.canvas.width;\n    const height = this.canvas.height;\n    const palette = this.colorPalette.getCurrentPalette();\n    const sunX = width * this.options.sunPosition.x;\n    const sunY = height * this.options.sunPosition.y;\n    const sunRadius = Math.min(width, height) * 0.05;\n\n    // Create radial gradient for sun glow\n    const sunGradient = this.offscreenCtx.createRadialGradient(sunX, sunY, 0, sunX, sunY, sunRadius * 3);\n    sunGradient.addColorStop(0, palette.sunColor);\n    sunGradient.addColorStop(0.3, palette.sunColor + '80'); // Semi-transparent\n    sunGradient.addColorStop(0.6, palette.sunColor + '20'); // More transparent\n    sunGradient.addColorStop(1, 'transparent');\n\n    // Draw sun glow\n    this.offscreenCtx.globalCompositeOperation = 'screen';\n    this.offscreenCtx.fillStyle = sunGradient;\n    this.offscreenCtx.fillRect(sunX - sunRadius * 3, sunY - sunRadius * 3, sunRadius * 6, sunRadius * 6);\n\n    // Draw sun disc\n    this.offscreenCtx.globalCompositeOperation = 'source-over';\n    this.offscreenCtx.beginPath();\n    this.offscreenCtx.arc(sunX, sunY, sunRadius, 0, Math.PI * 2);\n    this.offscreenCtx.fillStyle = palette.sunColor;\n    this.offscreenCtx.fill();\n  }\n\n  /**\n   * Update sky animation\n   * @param {number} deltaTime - Time since last update\n   */\n  update(deltaTime = 16) {\n    this.time += this.options.animationSpeed * deltaTime;\n\n    // Regenerate texture periodically for animated noise\n    if (this.options.enableNoise && Math.floor(this.time * 100) % 10 === 0) {\n      this.generateSkyTexture();\n    }\n  }\n\n  /**\n   * Render the sky to the main canvas\n   * @param {number} offsetX - Horizontal offset for parallax scrolling\n   * @param {number} offsetY - Vertical offset\n   */\n  render(offsetX = 0, offsetY = 0) {\n    // Clear the main canvas\n    this.ctx.save();\n\n    // Apply parallax offset (sky moves very slowly)\n    const parallaxX = offsetX * 0.1;\n    const parallaxY = offsetY * 0.05;\n\n    // Create pattern from offscreen canvas for seamless tiling\n    const pattern = this.ctx.createPattern(this.offscreenCanvas, 'repeat-x');\n    this.ctx.fillStyle = pattern;\n\n    // Apply transform for parallax\n    this.ctx.translate(-parallaxX, -parallaxY);\n\n    // Fill the entire canvas\n    this.ctx.fillRect(-parallaxX, -parallaxY, this.canvas.width + parallaxX * 2, this.canvas.height + parallaxY * 2);\n    this.ctx.restore();\n  }\n\n  /**\n   * Change time of day with smooth transition\n   * @param {string} newTimeOfDay - New time of day\n   * @param {number} transitionDuration - Transition duration in milliseconds\n   */\n  setTimeOfDay(newTimeOfDay, transitionDuration = 2000) {\n    if (transitionDuration === 0) {\n      this.colorPalette.setTimeOfDay(newTimeOfDay);\n      this.options.timeOfDay = newTimeOfDay;\n      this.generateSkyTexture();\n      return;\n    }\n\n    // TODO: Implement smooth color transition\n    // For now, just change immediately\n    this.colorPalette.setTimeOfDay(newTimeOfDay);\n    this.options.timeOfDay = newTimeOfDay;\n    this.generateSkyTexture();\n  }\n\n  /**\n   * Get current sky configuration\n   * @returns {Object} Current options\n   */\n  getOptions() {\n    return {\n      ...this.options\n    };\n  }\n\n  /**\n   * Update sky configuration\n   * @param {Object} newOptions - New options to apply\n   */\n  updateOptions(newOptions) {\n    this.options = {\n      ...this.options,\n      ...newOptions\n    };\n    if (newOptions.timeOfDay) {\n      this.colorPalette.setTimeOfDay(newOptions.timeOfDay);\n    }\n    if (newOptions.seed) {\n      this.noiseGenerator = new NoiseGenerator(newOptions.seed);\n    }\n    this.generateSkyTexture();\n  }\n\n  /**\n   * Get current time of day based on real time\n   * @returns {string} Time of day string\n   */\n  getAutomaticTimeOfDay() {\n    return this.colorPalette.getTimeBasedPalette();\n  }\n\n  /**\n   * Enable automatic time of day updates\n   */\n  enableAutomaticTimeOfDay() {\n    this.setTimeOfDay(this.getAutomaticTimeOfDay());\n\n    // Update every minute\n    this.timeUpdateInterval = setInterval(() => {\n      const newTimeOfDay = this.getAutomaticTimeOfDay();\n      if (newTimeOfDay !== this.options.timeOfDay) {\n        this.setTimeOfDay(newTimeOfDay, 5000); // 5 second transition\n      }\n    }, 60000);\n  }\n\n  /**\n   * Disable automatic time of day updates\n   */\n  disableAutomaticTimeOfDay() {\n    if (this.timeUpdateInterval) {\n      clearInterval(this.timeUpdateInterval);\n      this.timeUpdateInterval = null;\n    }\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy() {\n    this.disableAutomaticTimeOfDay();\n    this.offscreenCanvas = null;\n    this.offscreenCtx = null;\n  }\n}\nexport default SkyGenerator;","map":{"version":3,"names":["ColorPalette","NoiseGenerator","SkyGenerator","constructor","canvas","options","ctx","getContext","colorPalette","noiseGenerator","seed","Math","random","timeOfDay","enableNoise","noiseIntensity","gradientSteps","atmosphericPerspective","sunPosition","x","y","enableSun","animationSpeed","updateInterval","time","offscreenCanvas","document","createElement","offscreenCtx","width","height","setTimeOfDay","generateSkyTexture","palette","getCurrentPalette","gradient","createLinearGradient","addColorStop","skyTop","skyMid","skyHorizon","fillStyle","fillRect","addAtmosphericNoise","addSun","imageData","getImageData","data","i","noiseValue","octaveNoise2D","adjustment","max","min","putImageData","sunX","sunY","sunRadius","sunGradient","createRadialGradient","sunColor","globalCompositeOperation","beginPath","arc","PI","fill","update","deltaTime","floor","render","offsetX","offsetY","save","parallaxX","parallaxY","pattern","createPattern","translate","restore","newTimeOfDay","transitionDuration","getOptions","updateOptions","newOptions","getAutomaticTimeOfDay","getTimeBasedPalette","enableAutomaticTimeOfDay","timeUpdateInterval","setInterval","disableAutomaticTimeOfDay","clearInterval","destroy"],"sources":["/Users/brentdalling/Projects/code-camp-event-slider/src/graphics/generators/SkyGenerator.js"],"sourcesContent":["/**\n * Procedural Sky Generator\n * Creates dynamic sky backgrounds with gradient rendering and atmospheric effects\n */\n\nimport ColorPalette from '../utils/ColorPalette.js';\nimport NoiseGenerator from '../utils/NoiseGenerator.js';\n\nexport class SkyGenerator {\n  constructor(canvas, options = {}) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext('2d');\n    this.colorPalette = new ColorPalette();\n    this.noiseGenerator = new NoiseGenerator(options.seed || Math.random() * 1000);\n    \n    // Configuration options\n    this.options = {\n      timeOfDay: options.timeOfDay || 'day',\n      enableNoise: options.enableNoise !== false,\n      noiseIntensity: options.noiseIntensity || 0.1,\n      gradientSteps: options.gradientSteps || 256,\n      atmosphericPerspective: options.atmosphericPerspective !== false,\n      sunPosition: options.sunPosition || { x: 0.7, y: 0.3 },\n      enableSun: options.enableSun !== false,\n      animationSpeed: options.animationSpeed || 0.001,\n      updateInterval: options.updateInterval || 10000, // Update every 10 seconds\n      ...options\n    };\n    \n    this.time = 0;\n    this.offscreenCanvas = document.createElement('canvas');\n    this.offscreenCtx = this.offscreenCanvas.getContext('2d');\n    this.offscreenCanvas.width = canvas.width;\n    this.offscreenCanvas.height = canvas.height;\n    \n    // Initialize color palette\n    this.colorPalette.setTimeOfDay(this.options.timeOfDay);\n    \n    this.generateSkyTexture();\n  }\n\n  /**\n   * Generate the base sky texture using gradients and noise\n   */\n  generateSkyTexture() {\n    const width = this.canvas.width;\n    const height = this.canvas.height;\n    const palette = this.colorPalette.getCurrentPalette();\n    \n    // Create gradient from top to bottom\n    const gradient = this.offscreenCtx.createLinearGradient(0, 0, 0, height);\n    \n    // Add gradient stops based on current palette\n    gradient.addColorStop(0, palette.skyTop);\n    gradient.addColorStop(0.3, palette.skyMid);\n    gradient.addColorStop(0.7, palette.skyHorizon);\n    gradient.addColorStop(1, palette.skyHorizon);\n    \n    // Fill with gradient\n    this.offscreenCtx.fillStyle = gradient;\n    this.offscreenCtx.fillRect(0, 0, width, height);\n    \n    // Add atmospheric noise if enabled\n    if (this.options.enableNoise) {\n      this.addAtmosphericNoise();\n    }\n    \n    // Add sun if enabled\n    if (this.options.enableSun) {\n      this.addSun();\n    }\n  }\n\n  /**\n   * Add subtle atmospheric noise for texture\n   */\n  addAtmosphericNoise() {\n    const width = this.canvas.width;\n    const height = this.canvas.height;\n    const imageData = this.offscreenCtx.getImageData(0, 0, width, height);\n    const data = imageData.data;\n    \n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x++) {\n        const i = (y * width + x) * 4;\n        \n        // Generate noise value\n        const noiseValue = this.noiseGenerator.octaveNoise2D(\n          x * 0.002 + this.time,\n          y * 0.002,\n          3,\n          0.5\n        );\n        \n        // Apply noise to each color channel\n        const noiseIntensity = this.options.noiseIntensity * 255;\n        const adjustment = noiseValue * noiseIntensity;\n        \n        data[i] = Math.max(0, Math.min(255, data[i] + adjustment));     // Red\n        data[i + 1] = Math.max(0, Math.min(255, data[i + 1] + adjustment)); // Green\n        data[i + 2] = Math.max(0, Math.min(255, data[i + 2] + adjustment)); // Blue\n      }\n    }\n    \n    this.offscreenCtx.putImageData(imageData, 0, 0);\n  }\n\n  /**\n   * Add sun or moon to the sky\n   */\n  addSun() {\n    const width = this.canvas.width;\n    const height = this.canvas.height;\n    const palette = this.colorPalette.getCurrentPalette();\n    \n    const sunX = width * this.options.sunPosition.x;\n    const sunY = height * this.options.sunPosition.y;\n    const sunRadius = Math.min(width, height) * 0.05;\n    \n    // Create radial gradient for sun glow\n    const sunGradient = this.offscreenCtx.createRadialGradient(\n      sunX, sunY, 0,\n      sunX, sunY, sunRadius * 3\n    );\n    \n    sunGradient.addColorStop(0, palette.sunColor);\n    sunGradient.addColorStop(0.3, palette.sunColor + '80'); // Semi-transparent\n    sunGradient.addColorStop(0.6, palette.sunColor + '20'); // More transparent\n    sunGradient.addColorStop(1, 'transparent');\n    \n    // Draw sun glow\n    this.offscreenCtx.globalCompositeOperation = 'screen';\n    this.offscreenCtx.fillStyle = sunGradient;\n    this.offscreenCtx.fillRect(\n      sunX - sunRadius * 3,\n      sunY - sunRadius * 3,\n      sunRadius * 6,\n      sunRadius * 6\n    );\n    \n    // Draw sun disc\n    this.offscreenCtx.globalCompositeOperation = 'source-over';\n    this.offscreenCtx.beginPath();\n    this.offscreenCtx.arc(sunX, sunY, sunRadius, 0, Math.PI * 2);\n    this.offscreenCtx.fillStyle = palette.sunColor;\n    this.offscreenCtx.fill();\n  }\n\n  /**\n   * Update sky animation\n   * @param {number} deltaTime - Time since last update\n   */\n  update(deltaTime = 16) {\n    this.time += this.options.animationSpeed * deltaTime;\n    \n    // Regenerate texture periodically for animated noise\n    if (this.options.enableNoise && Math.floor(this.time * 100) % 10 === 0) {\n      this.generateSkyTexture();\n    }\n  }\n\n  /**\n   * Render the sky to the main canvas\n   * @param {number} offsetX - Horizontal offset for parallax scrolling\n   * @param {number} offsetY - Vertical offset\n   */\n  render(offsetX = 0, offsetY = 0) {\n    // Clear the main canvas\n    this.ctx.save();\n    \n    // Apply parallax offset (sky moves very slowly)\n    const parallaxX = offsetX * 0.1;\n    const parallaxY = offsetY * 0.05;\n    \n    // Create pattern from offscreen canvas for seamless tiling\n    const pattern = this.ctx.createPattern(this.offscreenCanvas, 'repeat-x');\n    this.ctx.fillStyle = pattern;\n    \n    // Apply transform for parallax\n    this.ctx.translate(-parallaxX, -parallaxY);\n    \n    // Fill the entire canvas\n    this.ctx.fillRect(\n      -parallaxX,\n      -parallaxY,\n      this.canvas.width + parallaxX * 2,\n      this.canvas.height + parallaxY * 2\n    );\n    \n    this.ctx.restore();\n  }\n\n  /**\n   * Change time of day with smooth transition\n   * @param {string} newTimeOfDay - New time of day\n   * @param {number} transitionDuration - Transition duration in milliseconds\n   */\n  setTimeOfDay(newTimeOfDay, transitionDuration = 2000) {\n    if (transitionDuration === 0) {\n      this.colorPalette.setTimeOfDay(newTimeOfDay);\n      this.options.timeOfDay = newTimeOfDay;\n      this.generateSkyTexture();\n      return;\n    }\n    \n    // TODO: Implement smooth color transition\n    // For now, just change immediately\n    this.colorPalette.setTimeOfDay(newTimeOfDay);\n    this.options.timeOfDay = newTimeOfDay;\n    this.generateSkyTexture();\n  }\n\n  /**\n   * Get current sky configuration\n   * @returns {Object} Current options\n   */\n  getOptions() {\n    return { ...this.options };\n  }\n\n  /**\n   * Update sky configuration\n   * @param {Object} newOptions - New options to apply\n   */\n  updateOptions(newOptions) {\n    this.options = { ...this.options, ...newOptions };\n    \n    if (newOptions.timeOfDay) {\n      this.colorPalette.setTimeOfDay(newOptions.timeOfDay);\n    }\n    \n    if (newOptions.seed) {\n      this.noiseGenerator = new NoiseGenerator(newOptions.seed);\n    }\n    \n    this.generateSkyTexture();\n  }\n\n  /**\n   * Get current time of day based on real time\n   * @returns {string} Time of day string\n   */\n  getAutomaticTimeOfDay() {\n    return this.colorPalette.getTimeBasedPalette();\n  }\n\n  /**\n   * Enable automatic time of day updates\n   */\n  enableAutomaticTimeOfDay() {\n    this.setTimeOfDay(this.getAutomaticTimeOfDay());\n    \n    // Update every minute\n    this.timeUpdateInterval = setInterval(() => {\n      const newTimeOfDay = this.getAutomaticTimeOfDay();\n      if (newTimeOfDay !== this.options.timeOfDay) {\n        this.setTimeOfDay(newTimeOfDay, 5000); // 5 second transition\n      }\n    }, 60000);\n  }\n\n  /**\n   * Disable automatic time of day updates\n   */\n  disableAutomaticTimeOfDay() {\n    if (this.timeUpdateInterval) {\n      clearInterval(this.timeUpdateInterval);\n      this.timeUpdateInterval = null;\n    }\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy() {\n    this.disableAutomaticTimeOfDay();\n    this.offscreenCanvas = null;\n    this.offscreenCtx = null;\n  }\n}\n\nexport default SkyGenerator;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}