// This file is now unused. The runtime plugin is loaded via CDN in MainScene.js.
// You may safely delete this file if you wish to avoid confusion.

/* eslint-disable */
(function (f) { if (typeof exports === "object" && typeof module !== "undefined") { module.exports = f() } else if (typeof define === "function" && define.amd) { define([], f) } else { var g; if (typeof window !== "undefined") { g = window } else if (typeof global !== "undefined") { g = global } else if (typeof self !== "undefined") { g = self } else { g = this } g.rexbarreldistortionpipelineplugin = f() } })(function () {
    var define, module, exports; return function () { function r(e, n, t) { function o(i, f) { if (!n[i]) { if (!e[i]) { var c = "function" == typeof require && require; if (!f && c) return c(i, !0); if (u) return u(i, !0); var a = new Error("Cannot find module '" + i + "'"); throw a.code = "MODULE_NOT_FOUND", a } var p = n[i] = { exports: {} }; e[i][0].call(p.exports, function (r) { var n = e[i][1][r]; return o(n || r) }, p, p.exports, r, e, n, t) } return n[i].exports } for (var u = "function" == typeof require && require, i = 0; i < t.length; i++)o(t[i]); return o } return r }()({
        1: [function (require, module, exports) {
            (function (global, factory) { typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.rexbarreldistortionpipelineplugin = factory()) })(this, function () {
                'use strict';
                var GetValue = Phaser.Utils.Objects.GetValue;
                var fragShader = [
                    "precision mediump float;",
                    "uniform sampler2D uMainSampler;",
                    "varying vec2 outTexCoord;",
                    "uniform float amount;",
                    "void main(void) {",
                    "    vec2 p = outTexCoord * 2.0 - 1.0;",
                    "    float r = length(p);",
                    "    float theta = atan(p.y, p.x);",
                    "    float rn = pow(r, 1.0 + amount * 0.5);",
                    "    vec2 uv = rn * vec2(cos(theta), sin(theta));",
                    "    uv = (uv + 1.0) / 2.0;",
                    "    if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) {",
                    "        gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);",
                    "    } else {",
                    "        gl_FragColor = texture2D(uMainSampler, uv);",
                    "    }",
                    "}",
                ].join("\n");

                var BarrelDistortionPipeline = new Phaser.Class({
                    Extends: Phaser.Renderer.WebGL.Pipelines.SinglePipeline,
                    initialize:
                        function BarrelDistortionPipeline(game) {
                            Phaser.Renderer.WebGL.Pipelines.SinglePipeline.call(this, {
                                game: game,
                                fragShader: fragShader
                            });
                        },
                    onPreRender: function () {
                        this.set1f('amount', this.amount || 0.5);
                    }
                });

                var BarrelDistortionPipelinePlugin = function (scene) {
                    this.scene = scene;
                    this.systems = scene.sys;
                    this.systems.events.once('boot', this.boot, this);
                };

                BarrelDistortionPipelinePlugin.prototype.boot = function () {
                    var renderer = this.systems.game.renderer;
                    if (renderer instanceof Phaser.Renderer.WebGL.WebGLRenderer) {
                        var pipeline = renderer.pipelines.add('rexBarrelDistortionPipeline', new BarrelDistortionPipeline(this.systems.game));
                        this.systems.renderer.pipelines = renderer.pipelines;
                    }
                };

                BarrelDistortionPipelinePlugin.prototype.start = function () {
                    this.systems.events.on('start', this.onSceneStart, this);
                };

                BarrelDistortionPipelinePlugin.prototype.onSceneStart = function () {
                    this.scene.cameras.main.setRenderToTexture('rexBarrelDistortionPipeline');
                };

                return BarrelDistortionPipelinePlugin;
            });

        }, {}]
    }, {}, [1])(1)
});
